syntax = "proto3";

package me.dgahn.person;

option java_package = "me.dgahn.person";
option java_outer_classname = "PersonProto";

message Person {
    string name = 1;
    int64 id = 2;
    string email = 3;

    enum PhoneType {
        DEFAULT = 0;
        HOME = 1;
        WORK = 2;
        MOBILE = 3;
    }

    message PhoneNumber {
        string number = 1;
        PhoneType type = 2;
    }

    repeated PhoneNumber phones = 4;
}

service PersonService {
    // 클라이언트가 스텁을 사용하여 서버에 요청을 보내고 일방 함수 호출과 같이 응답이 다시 올 때까지 기다른 간단한 RPC
    rpc GetPerson1(Person) returns (Person) {}
    // 클라이언트가 시퀀스 메시지를 작성하여 제공된 스트림을 사용하여 다시 서버로 보내는 클라이언트 측 스트리밍 RPC
    // 클라이언트가 메시지 쓰기를 마치면 서버가 메시지를 모두 읽고 응답을 반환할 때까지 기다린다.
    rpc GetPerson2(stream Person) returns (Person) {}
    // 클라이언트가 서버에 요청을 보내고 스트림을 가져 와서 메시지를 다시 읽는 서버 측 스트리밍 RPC
    // 클라리언트는 더 이상 메시지가 없을 때까지 리턴된 스트림에서 읽는다.
    rpc GetPerson3(Person) returns (stream Person) {}
    // 양방향 읽기 / 쓰기 스트림을 사용한다. 두 스트림은 독립적으로 작동하기 때문에 클라이언트와 서버는 원하는 순서대로 읽고 쓸 수 있다.
    rpc GetPerson4(stream Person) returns (stream Person) {}
}